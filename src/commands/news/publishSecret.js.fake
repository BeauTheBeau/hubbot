const {
    SlashCommandBuilder,
    ActionRowBuilder,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle
} = require('discord.js');
const {EmbedUtils} = require('../../functions/utilities/embedUtils');
const {Logger} = require('../../functions/utilities/loggingUtils.js')
const logger = new Logger();
const embedUtils = new EmbedUtils(logger);
const fetch = require(`node-fetch`);

const userModel = require('../../models/userModel.js');
const secretModel = require('../../models/secretModel.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('secret')
        .setDescription('Publish a secret.')
        .addStringOption(option => option
            .setName('tags')
            .setDescription('Tags for the secret.')
            .setRequired(true),
        )
        .addAttachmentOption(option => option
            .setName('attachment-1')
            .setDescription('Attachment 1')
            .setRequired(false)
        )
        .addAttachmentOption(option => option
            .setName('attachment-2')
            .setDescription('Attachment 2')
            .setRequired(false)
        )
        .addAttachmentOption(option => option
            .setName('attachment-3')
            .setDescription('Attachment 3')
            .setRequired(false)
        )
        .addAttachmentOption(option => option
            .setName('attachment-4')
            .setDescription('Attachment 4')
            .setRequired(false)
        ),
    async execute(interaction) {

        return interaction.reply({content: 'This command is currently unavailable.', ephemeral: true});

        const arguments = {
            tags: interaction.options.getString('tags'),
            user: interaction.user,
            attachments: [
                interaction.options.getAttachment('attachment-1'),
                interaction.options.getAttachment('attachment-2'),
                interaction.options.getAttachment('attachment-3'),
                interaction.options.getAttachment('attachment-4')
            ]
        }

        try {

            const users = await userModel.find({}).select('userID isAuthor').lean();
            const user = users.find((user) => user.userID === interaction.user.id);

            let secretID = await secretModel.countDocuments() + 1;
            while (await secretModel.exists({secretID: secretID})) { secretID++; }

            // Save the attachments locally
            const fs = require('fs');
            const path = require('path');
            const attachmentPaths = [];
            for (const attachment of arguments.attachments) {
                if (!attachment) continue;
                const attachmentData = await fetch(attachment.url).then(res => res.buffer());
                const attachmentPath = path.join(__dirname, `../../../attachments/${secretID}-${attachment.name}`);
                fs.writeFileSync(attachmentPath, attachmentData);
                attachmentPaths.push(attachmentPath);
            }

            const secretModal = new ModalBuilder()
                .setCustomId(`createSecret_${secretID}_${arguments.tags}`)
                .setTitle('Create a secret')

            const titleInput = new TextInputBuilder()
                .setCustomId('title')
                .setLabel('Title')
                .setPlaceholder('Enter the title of the secret.')
                .setMinLength(1)
                .setMaxLength(64)

        } catch (err) {
            logger.error(`Error finding user ${interaction.user.id}`);
            logger.error(err.stack);
            await embedUtils.sendEmbed(interaction, 'ERROR',
                'Failed to find user.', 'Whoops! Something went wrong.');
            throw new Error('Failed to find user.');
        }

    }
}
